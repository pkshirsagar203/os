#include <iostream>
#include <unistd.h>
#include <cstring>
using namespace std;

int main() {
    int pipefds[2];
    int returnstatus;
    int pid;
    char writemessage[20] = "Hello!!";
    char readmessage[20];

    // Create a pipe
    returnstatus = pipe(pipefds);
    if (returnstatus == -1) {
        std::cerr << "Unable to create pipe" << std::endl;
        return 1;
    }

    // Create a child process
    pid = fork();
    if (pid != 0) { // Parent process
        close(pipefds[0]); // Close the read side of the pipe
        // Writing to the pipe
        ssize_t bytes_written = write(pipefds[1], writemessage, sizeof(writemessage));
        if (bytes_written == -1) {
            cerr << "Error writing to pipe" << std::endl;
            return 1;
        }
        std::cout << "In Parent: Writing to pipe - Message: " << writemessage << std::endl;
    } else { // Child process
        close(pipefds[1]); // Close the write side of the pipe
        // Reading from the pipe
        ssize_t bytes_read = read(pipefds[0], readmessage, sizeof(readmessage));
        if (bytes_read == -1) {
            std::cerr << "Error reading from pipe" << std::endl;
            return 1;
        }
        std::cout << "In Child: Reading from pipe - Message: " << readmessage << std::endl;
    }

    return 0;
}

#include <iostream>
#include <unistd.h>
#include <cstring>

int main() {
    int pipefds1[2], pipefds2[2];
    int returnstatus1, returnstatus2;
    int pid;
    char pipe1writemessage[20] = "Hi";
    char pipe2writemessage[20] = "Hello";
    char readmessage[20];

    // Create the first pipe
    returnstatus1 = pipe(pipefds1);
    if (returnstatus1 == -1) {
        std::cerr << "Unable to create pipe 1" << std::endl;
        return 1;
    }

    // Create the second pipe
    returnstatus2 = pipe(pipefds2);
    if (returnstatus2 == -1) {
        std::cerr << "Unable to create pipe 2" << std::endl;
        return 1;
    }

    // Create a child process
    pid = fork();
    if (pid != 0) { // Parent process
        close(pipefds1[0]); // Close the read side of the first pipe
        close(pipefds2[1]); // Close the write side of the second pipe

        // Writing to the first pipe
        ssize_t bytes_written = write(pipefds1[1], pipe1writemessage, sizeof(pipe1writemessage));
        if (bytes_written == -1) {
            std::cerr << "Error writing to pipe 1" << std::endl;
            return 1;
        }
        std::cout << "In Parent: Writing to pipe 1 - Message is " << pipe1writemessage << std::endl;

        // Reading from the second pipe
        ssize_t bytes_read = read(pipefds2[0], readmessage, sizeof(readmessage));
        if (bytes_read == -1) {
            std::cerr << "Error reading from pipe 2" << std::endl;
            return 1;
        }
        std::cout << "In Parent: Reading from pipe 2 - Message is " << readmessage << std::endl;
    } else { // Child process
        close(pipefds1[1]); // Close the write side of the first pipe
        close(pipefds2[0]); // Close the read side of the second pipe

        // Reading from the first pipe
        ssize_t bytes_read = read(pipefds1[0], readmessage, sizeof(readmessage));
        if (bytes_read == -1) {
            std::cerr << "Error reading from pipe 1" << std::endl;
            return 1;
        }
        std::cout << "In Child: Reading from pipe 1 - Message is " << readmessage << std::endl;

        // Writing to the second pipe
        ssize_t bytes_written = write(pipefds2[1], pipe2writemessage, sizeof(pipe2writemessage));
        if (bytes_written == -1) {
            std::cerr << "Error writing to pipe 2" << std::endl;
            return 1;
        }
        std::cout << "In Child: Writing to pipe 2 - Message is " << pipe2writemessage << std::endl;
    }

    return 0;
}
