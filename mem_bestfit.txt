#include<iostream>
using namespace std;
// Method to allocate memory to blocks as per Best fit algorithm
void bestFit(int blockSize[], int m, int processSize[], int n)
{
// Stores block id of the block allocated to a process
int allocaƟon[n];
// IniƟally no block is assigned to any process
for (int i = 0; i < n; i++)
allocaƟon[i] = -1;
// pick each process and find suitable blocks
// according to its size ad assign to it
for (int i = 0; i < n; i++)
{

// Find the best fit block for current process
int bestIdx = -1;
for (int j = 0; j < m; j++)
{
if (blockSize[j] >= processSize[i])
{
if (bestIdx == -1)
bestIdx = j;
else if (blockSize[bestIdx] > blockSize[j])
bestIdx = j;
}
}
// If we could find a block for current process
if (bestIdx != -1)
{
// allocate block j to p[i] process
allocaƟon[i] = bestIdx;
// Reduce available memory in this block.
blockSize[bestIdx] -= processSize[i];
}
}
cout << "\nProcess No.\tProcess Size\tBlock no.\n";
for (int i = 0; i < n; i++)
{
cout << " " << i+1 << "\t\t" << processSize[i] << "\t\t";
if (allocaƟon[i] != -1)
cout << allocaƟon[i] + 1;
else
cout << "Not Allocated";
cout << endl;
}
}
// Driver Method
int main() {
    int m, n;
    cout << "Enter the number of blocks: ";
    cin >> m;
    int blockSize[m];
    cout << "Enter the block sizes:" << endl;
    for (int i = 0; i < m; i++) {
        cin >> blockSize[i];
    }
    cout << "Enter the number of processes: ";
    cin >> n;
    int processSize[n];
    cout << "Enter the process sizes:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> processSize[i];
    }
    bestFit(blockSize, m, processSize, n);
    return 0;
}